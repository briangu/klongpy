.py("klongpy.ws")

auth:::{["action" "auth"]}
KEY::.os.env?"POLYGON_API_KEY"
auth::auth,"params",,KEY

:" polygon subscription handler "
psmsg::{:{["action" "subscribe"]},"params",,x}
unionValues::{[q];q:::{};{{q,x,1}'x@1}'x;{x@0}'q}
join::{[q];q::"";{q::q,x}'((x@0),",",:\1_x);q}
updPolygonSub::{[v q];.d("subscribing to polygon: ");v::unionValues(x);.p(v);v::join(v);.p(v);polygon(psmsg(v))}

:" Map of clients handles to their subscribed tickers "
clients:::{}

:" Handle server auth request "
sendAuth::{.p("sending auth");x(auth)}
handleUnknown::{.d("unhandled");.p(y)}
handleLogin::{.p("logged in")}
handleSuccess::{.p("success");.p(y)}

handlers:::{}
handlers,"connected",sendAuth
handlers,"auth_success",handleLogin
handlers,"success",handleSuccess
handleStatus::{h::handlers?(y?"status");:[h;h(x;y);handleUnknown(x;y)]}

:" send the message to all subscribed clients "
send::{.d("sending ");.d(k);.d(" to client ");.p(y);y(:update,,z)}
match::{[ev k subscription];ev::x;k::y;subscription::z;all::ev,".*";:[subscription?all;1;:[subscription?k;1;0]]}
broadcast::{[ev k data];ev::x;k::y;data::z;{:[match(ev;k;x@1);send(k;x@0;data);0]}'clients}
handleData::{[ev sym k];ev::(y?"ev");sym::(y?"sym");k::ev,".",sym;broadcast(ev;k;y)}

handleMsg::{[q];q::y?"ev";:[q="status";handleStatus(x;y);handleData(x;y)]}

.ws.m::{[c];c::x;{handleMsg(c;x)}'y}

wsuri:::[(#.os.argv);.os.argv@0;"wss://delayed.polygon.io/stocks"]
.d("connecting to ");.p(wsuri)
polygon::.ws(wsuri)

:" Called by clients to subscribe to ticker updates "
updClientSub::{clients,x,,(clients?x),,y;.p(clients)}
subscribe::{.d("subscribing client: ");.p(.cli.h,,x);updClientSub(.cli.h;x);updPolygonSub(clients);x}

:" Setup the IPC server and callbacks "
.srv(8888)
.srv.o::{.d("client connected: ");.p(x);clients,x,,[]}
.srv.c::{.d("client disconnected: ");.p(x);x_clients;updPolygonSub();.d("clients left: ");.p(#clients)}
.srv.e::{.d("error: ");.p(x);.p(y)}
