.comment("****")

Get a list of all tickers from Polygon.
For each ticker, get the latest stored time from the dfs and use that as the start time for the next request
map the new ticker data to the columns of the dfs
append the new data to the dfs
write the data back to the dfs

****

.py("klongpy.db")
.pyf("polygon";"RESTClient")
.pyf("requests";"get")

timespan:::[(#.os.argv)>0;.os.argv@0;"hour"]
dfsport:::[(#.os.argv)>1;0$#.os.argv@1;8888]

callpoly::{[r];x;.p(x);r::get(x,"&apiKey=",.os.env?"POLYGON_API_KEY");:[.pyc([r "status_code"];[];:{})=200;.pyc([r "json"];[];:{});0]}
getresults::{:[(x?"resultsCount")>0;x?"results";[]]}
paginate::{[a];a::[];{:[x;{a::a,getresults(x);~:_x?"next_url"}(x);x]}{callpoly(x?"next_url")}:~callpoly(x);a}

aggsurl::{"https://api.polygon.io/v2/aggs/ticker/",(x?"symbol"),"/range/1/",(x?"timespan"),"/",(x?"from"),"/",(x?"to"),"?adjusted=true&sort=asc&limit=",(x?"limit")}

:" create a table with the same columns as the polygon data "
cols::["t" "c" "h" "l" "n" "o" "v" "vw"]
colsFromNames::{{x,,[]}'x}
newt::{.table(colsFromNames(cols))}

:" open connection to the dfs server "
cli::.cli(dfsport)

:" default start date "
startdate::"2022-09-09"

:" read the latest time from the table "
latest::{:[:_x;startdate;:[(#x)>0;0$(((x?"t")@-1):%1);startdate]]}
readtbl::{[dfs sym tbl];dfs::x;sym::y;tbl::dfs(:read,sym);:[:_tbl;newt();tbl]}

:" prepare the request data "
mkd::{[d];d:::{};d,"symbol",,x;d,"timespan",,y;d,"from",,z;d,"to",,"2023-09-25";d,"limit",,"50000";d}

extract::{[d];d::x;{d?x}'cols}
updtbl::{[tbl];tbl::x;{.insert(tbl;extract(x))}'y}
update::{[dfs sym ts path tbl d];dfs::x;sym::y;ts::z;path::ts,"/",sym;tbl::readtbl(dfs;path);d::paginate(aggsurl(mkd(sym;ts;latest(tbl))));updtbl(tbl;d);.d("records: ");.p(#d);:[(#d)>0;dfs(:write,path,tbl);"skipping"]}

:" Get the list of tickers from polygon "
rc::RESTClient()
symbols::.pyc([rc "list_tickers"];[];:{["market" "stocks"] ["limit" 1000]});1
tickers::{x;.pyc(x,"ticker";[];:{})}'symbols;1

{.d("updating: ");.p(x);update(cli;x;timespan)}'tickers

:" close connection to the dfs server "
.clic(cli)
