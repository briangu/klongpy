.py("klongpy.db")
.py("../../ml/lstm/lstm.py")
.py("mkwindows.py")
.l("yfinance.kg")


T::fetch("MSFT";"2020-01-01"; "2023-01-01"])

:" get close prices "
close::T?"Close"

:" window size of 10 "
k::10

:" create windows "
windows::mkwindows(close;k)

:" create the model wrapper "
m::model(1;10;1)

:" create windowed data and labels "
windows::mkwindows(close;k)
labels::{x@-1}'1_windows

:" truncate the windows to the same length as the labels "
windows::(-1)_windows

:" show unnormalized windows and labels "
.d("series ");.d(1#windows);.d(" predicts ");.p(1#labels)

:" normalize windows and labels to the corresponding window max"
wmax::{(x@>x)@0}'windows
windows::wmax{y%x}'windows
labels::wmax{y%x}'labels

trainx::(-1)_windows;trainy::(-1)_labels
testx::windows@-1;testy::labels@-1

:" print the first window and label "
.d("series ");.d(1#trainx);.d(" predicts ");.p(1#trainy)

:" create the stateful model trainer "
t::trainer(m)

:" train the model using the Each-2 operator which calls t(x;y) for each window and label "
loss::trainx t'trainy

:" show that the training loss decreases "
.d("training loss: ");.d(loss@0);.d(" --> ");.p(loss@-1)

:" predict using the model "
p::predictor(m)
.d("prediction: ");.d((wmax@-1)*p(testx));.d(" should be close to ");.p((wmax@-1)*testy)
