:"help utility"

.l("util.kg")
.module(:help)

op.db::[
 [" a:=b" "Amend" "a=vector, b=[x n0 ...]; amend x in a@n0, ..."]
 [" a:=b" "Amend" "a=string, b=[s n0 ...]; amend string s at a@n0, ..."]
 [" a:-b" "Amend-in-Depth" "a=vector, b=[x n0 ...]; amend x in (a@n0)@..."]
 [" @a" "Atom" "1, if 'a' is atomic"]
 [" :#a" "Char" "a=integer; character with code point 'a'"]
 [" a:_b" "Cut" "a=integer|list, b=vector; cut 'b' at 'a' or at a0, ..."]
 [" a::b" "Define" "a=symbol; assign the value of 'b' to 'a'"]
 [" a%b" "Divide" "a,b=real; quotient of 'a' and 'b'"]
 [" a_b" "Drop"
  "a=integer, b=vector; drop 'a' elements from 'b'; -b = drop from end"]
 [" !a" "Enumerate" "a=integer; list of integers 0..'a'-1"]
 [" a=b" "Equal" "a,b=real|char|string; 1, if 'a' equals 'b'"]
 [" &a" "Expand/Where"
  "a=list; list of integers 0.. where each xi is included ai times"]
 [" &a" "Expand/Where" "a=integer; list of 'a' zeroes"]
 [" a?b" "Find" "a=vector; vector of indices of 'b' in 'a'"]
 [" a?b" "Find" "a=string, b=char; vector of indices of 'b' in 'a'"]
 [" a?b" "Find"
  "a=string, b=string; vector of indices of substring 'b' in 'a'"]
 [" a?b" "Find" "a=dict; tuple with key 'b' or :undefined"]
 [" *a" "First" "a=vector; first element or []"]
 [" *a" "First" "a=string; first element or """""]
 [" _a" "Floor" "a=real; 'a' rounded to -infinity"]
 [" a:$b" "Form"
  "b=string; convert 'b' to an object of the same form (type) as 'a'"]
 [" $a" "Format" "convert 'a' to a string representing the value of 'a'"]
 [" a$b" "Format2"
  "a=real; Format 'b', pad with 'a' blanks or to align to x.y digits"]
 [" >a" "Grade-Down"
  "a=vector; vector of indices of elements of 'a' in ascending order"]
 [" <a" "Grade-Up"
  "a=vector; vector of indices of elements of 'a' in descending order"]
 [" =a" "Group" "a=vector; vector of groups (matching elements) of 'a'"]
 [" a@b" "Index/Apply" "a=vector, b=integer; extract b'th element of 'a'"]
 [" a@b" "Index/Apply"
  "a=vector, b=list(integer); extract bi'th elements from 'a'"]
 [" a:@b" "Index-in-Depth" "a=vector, b=integer; extract b'th element of 'a'"]
 [" a:@b" "Index-in-Depth" "a=vector, b=list(integer); extract (a@b0)@..."]
 [" a:%b" "Integer-Divide" "truncated quotient of 'a' and 'b'"]
 [" a,b" "Join" "join 'a' and 'b' in a list/vector"]
 [" a<b" "Less" "a,b=real|char|vector; 1, if 'a' is less than 'b'"]
 [" ,a" "List" "single-element list containing 'a'"]
 [" a~b" "Match" "1, if a=b or 'a' and 'b' are equal vectors"]
 [" a|b" "Max/Or" "a,b=real; greater value of 'a' and 'b'; also logical OR"]
 [" a&b" "Min/And" "a,b=real; lesser value of 'a' and 'b'; also logical AND"]
 [" a-b" "Minus" "a,b=real; difference between 'a' and 'b'"]
 [" a>b" "More" "a,b=real|char|vector; 1, if 'a' is greater than 'b'"]
 [" -a" "Negate" "a=real; negative value"]
 [" ~a" "Not" "logical complement"]
 [" a+b" "Plus" "sum"]
 [" a^b" "Power" "'a' raised to the b'th power"]
 [" ?a" "Range" "a=vector; unique elements of 'a' in order of appearance"]
 [" %a" "Reciprocal" "1 divided by 'a'"]
 [" a:^b" "Reshape"
  "a=vector|integer; 'b' reshaped to the dimensions of 'a', row-major"]
 [" a!b" "Remainder" "truncated division remainder of a:%b"]
 [" |a" "Reverse" "a=vector; reversed vector"]
 [" a:+b" "Rotate"
  "a=integer, b=vector; 'b' rotated to right by 'a' elements (a<0 = left)"]
 [" ^a" "Shape" "a=vector; vector of dimenions of 'a'; 0 for atoms"]
 [" #a" "Size"
  "magnitude of numbers, size of vectors, code points of characters"]
 [" a:#b" "Split" "a=integer, b=vector; split 'b' into 'a'-element subvectors"]
 [" a:#b" "Split"
  "a=list(integer), b=vector; split into subvectors of sizes in 'a'"]
 [" a#b" "Take"
  "a=integer, b=vector; extract first (a<0 = last) 'a' elements from 'b'"]
 [" a*b" "Times" "a,b=real; product"]
 [" +a" "Transpose" "a=vector; transpose of 'a'; 'a' must be symmetric"]
 [" :_a" "Undefined" "1, if 'a' is :undefined"]]

:[[]~.helpdb;.helpdb::op.db;0]
pho::{.d(1_7$*.helpdb@x);.d((.helpdb@x)@2);.p("")}
phf::{.p(*.helpdb@x);{.p("    ", x)}'1_.helpdb@x}
ph::{:[0c ~**.helpdb@x;pho(x);phf(x)]}
fho::{(~[]~(*x)?y)|~[]~(x@1)?y}
fhf::{(~""~y)&~[]~(*x)?y}
fh::{:[0c ~**x;fho(x;y);fhf(x;y)]}
help::{[h];h::x;ph'&{fh(x;h)}'.helpdb;[]}
help.add::{:[.helpdb?*x;1;.helpdb::.helpdb,x]}

.module(0)
