:"statistics functions"

.comment("*****")

A "data set" in this context is a list of data points [x1, ... xN].
An "x/y set" is a list of x/y pairs [[x1 y1] ... [xN yN]].

kp(k;n) k-permutations of set of size n
kc(k;n) k-combinations of set of size n

rcp(A;B|A;B'|A') reverse conditional probability P(A|B) (Bayes' rule)

mu(d)     mean of data set d = [x1, ...]
Q(x;d)    x'th quantile of data set; 0<=x<=1
M(d)      median of data set
mo(d)     mode of data set (also mod; deprecated)
rng(d)    range of data set
var(d)    variance of data set
cov(d;d2) covariance of data sets
cor(d;d2) correlation coefficient of data sets
sd(d)     standard deviation of data set (population sd)
svar(d)   sample variance of data set
ssd(d)    standard deviation of data set (sample sd)

lreg(s)   linear regression coefficients for x/y set s, gives a,b in ax+b
lr(x;l)   interpolate "y" at "x" using l=a,b of lreg
hist(k;d) k-histogram of data set d (list of means between k-quantiles)
seg(k;d)  divide data set d into k segments, returning k+1 endpoints
rss(s;f)  compute RSS for x/y set s and regression function f
rse(s;f)  compute RSE (res. sq. error) for x/y set x and reg. fn. f
tss(s)    compute total sum of squares (TSS) of set s
r2(s;f)   compute R^2 statistic for given x/y set and regression function
mse(s;f)  compute mean squared error (MSE) for x/y set and regression fn

rss.set(x;y), rse.set(x;y), mse.set(x;y), r2.set(x;y)
          These function also compute the RSS, RSE, MSE, and r-squared,
          but by comparing two data sets instead of an x/y set and a model.

spl(k;s)  compute spline with k degrees of freedom through x/y set s

cvset(s)   create cross validation set from x/y set
cve(f;p;s) cross validation error of set s, fitting fn f, and prediction fn p

freq(D;n;[x0 xn])  create relative n-point frequency distribution X~D
                   in [x0,xn]; D is a PDF
nfreq(D;n;[x0 xn]) create normalized n-point frequency distribution X~D
                   in [x0,xn]; D is a PDF
dist(D;n;[x0 xn])  create n D-distributed data points in [x0,xn]; D is a PDF:
                   note: "dist" creates absolute frequencies; &dist creates
                   the actual distribution
fdist(D)    create frequency distribution from random data set D
shuffle(x)  randomly arrange the elements of data set x

errdist(x)  Create a set of normally distributed error values in the range
            [-0.5..0.5]; x is the number of distinct error values; try x=10
err(x;y;z)  Add a normally distributed error to data set z; x is the number
            of distinct error values, y the size of the error (1=[-0.5..0.5])

ct.xsum(CT) marginal sums of X categories of contingency table (CT)
ct.ysum(CT) marginal sums of Y categories of CT
ct.sum(CT)  grand total of CT
ct.exp(CT)  expectations of CT
ct.x2(CT)   chi-square score of CT

erf(x)    Gauss error function

Probability Distribution Functions:

Distrib.    Pre   PMF/PDF  CDF      QF      Mean   Med.   Mode   Var.   Skew.
----------  fix   pmf/pdf  cdf      qf      mu     M      mo     var    skew
Frequency   f.    x;f      x;f      -       f      f      f      f      -
Uniform     r.    x;a;b    x;a;b    -       a;b    a;b    a;b    a;b    a;b
Discrete
uniform     u.    x;a;b    x;a;b    -       a;b    a;b    -      a;b    a;b
Geometric   geo.  x;p      x;p      -       p      p      p      p      p
Binomial    b.    x;n;p    x;n;p    -       n;p    n;p    n;p    n;p    n;p
Hyper-
geometric   hyp.  x;n,p,N  x;n,p,N  -       n;p;N  -      n;P;n  n;P;n  n;P;n
Poisson     poi.  x;L      x;L      -       L      L      L      L      L
Normal      n.    x;M;S    x;M;S    p;M;S   M;S    M;S    M;S    M;S    M;S
Standard
normal      -     ndf(x)   cdf(x)   qf(p)   1      1      1      1      0
Lognormal   ln.   x;M;S    x;M;S    p;M;S   M;S    M;S    M;S    M;S    M;S
Chi-square  x2.   N;x      N;x      N;p     N      N      N      N      N
Student t   t.    N;x      N;x      N;p     N      N      N      N      N
Fisher-
Snedecor F  F.    x;N1;N2  x;N1;N2  p;N1;N2 N1;N2  -      N1;N2  N1;N2  N1;N2

f.add(x;y;z)     add amount z to entry y of frequency table (dictionary) x
tscore(x;s2;n)   t-score of x given variance s2 and # of observations n
zscore(x;mu;s2)  z-score of x given mean mu and variance s2
fscore([s1 S1];[s2 S2])
                 F-score of samples means s1/s2 and population means S1/S2
X2(E;O)          compute X^2 statistic; E=expected, O=observed

Error function approximation by Abramowitz/Stegun, max error = 1.5x10-7.
T distribution approximation by Zogheib/Elsaheli, max error = 0.0029

************************************************************************

.l("spline.kg")
.l("math.kg")
.l("help.kg")
.module(:nstat)

kp::{*/(y-x)+1+!x}
kc::{:[0~x;1;_kp(x;y)%*/1+!x]}

rcp::{(x*y)%(x*y)+(1-x)*1-z}

mu::{(+/x)%#x}
S::{:[y<0;0:|~y<#x;*|x;x@y]}
Q::{[s i];s::y@<y;:[i=_i::x*#y;mu(S(s;_i),S(s;_i-1));S(s;_i)]}
M::{Q(0.5;x)}
qrt::{Q(0.25;x),Q(0.5;x),Q(0.75;x)}
mo::{[g f];x@(*'g)@&f=|/f::#'g::=x}
mod::mo :"XXX deprecated"
rng::{[s];(*|s)-*s::x@<x}
cov::{((+/x*y)%#x)-mu(x)*mu(y)}
var::{cov(x;x)}
var::{((+/x*x)%#x)-mu(x)^2}
cor::{cov(x;y)%sd(x)*sd(y)}
sd::{sqr(var(x))}
svar::{((+/{x*x}'x)%(#x)-1)-mu(x)^2}
ssd::{sqr(svar(x))}

lreg::{[a];a::cov(x;y)%var(x);a,mu(y)-a*mu(x)}
lreg::{[a xx yy mx my];xx::*'x;yy::{x@1}'x;mx::mu(xx);my::mu(yy);
       a::+/((xx-mx)*'yy-my)%+/{x^2}'(xx-mx);a,my-a*mx}
lr::{(x**y)+y@1}

hist::{[s];s::,/{10:^x}'y;mu'(-_-(#s)%x):#s}
seg::{(&/y)+(rng(y)%x)*0,1+!x}

rss::{[f];f::y;+/(*'x){(y-f(x))^2}'{x@1}'x}
rse::{sqr(rss(x;y)%(#x)-2)}
tss::{[mx s];s::{x@1}'x;mx::mu(s);+/{(x-mx)^2}'s}
r2::{1-rss(x;y)%tss(x)}
mse::{rss(x;y)%#x}
rss.set::{+/x{(y-x)^2}'y}
rse.set::{sqr(rss.set(x;y)%(#x)-2)}
mse.set::{rss.set(x;y)%#x}
r2.set::{1-rss.set(x;y)%tss(x)}

hg::{[h];+(,seg((#h)-1;*'y)),,h::hist(x;{x@1}'y)}
spl::{[s n];s::spline(hg(x;y));s:-(y:@((#y)-1),0),((#s)-1),0}

cvset::{[s];s::x;{(x@1),,(*x),x@2}'{(x,x+1):_s}'!#x}
cve::{[f p];f::x;p::y;(%#z)*+/{(((*x)@1)-p(**x;f(x@1)))^2}'cvset(z)}

freq::{[d c D x0 xn n];D::x;n::y;x0::*z;xn::z@1;D'x0+(!n)%(n-1)%xn-x0}
nfreq::{[c d];c::%|/d::freq(x;y;z);{c*x}'d}
dist::{[n];n::y;rnd'{n*x}'nfreq(x;n;(*z),z@1)}

errdist::{[s];s::(-|s),s::&dist(ndf;x;[0 3]);{-x*0.5%*s}'s}
err::{[d n e];d::errdist(x);n::#d;e::y;{x+e*d@_n*.rn()}'z}

fdist::{[g];#'g@<x@*'g::=x}

.comment("***")
shuffle::{[k drop];drop::{:[0=y;1_x;((y-1)#x),y_x]};k::_.rn()*#x;
          :[2>#x;x;(x@k),.f(drop(x;k+1))]}
***

shuffle::{x@>(#x){x,.rn()}:*[]}

cp::{[f b];f::x;b::z;,/{[a];a::x;,f(a;)'b}'y}
ct.xsum::{+/x}
ct.ysum::{+/'x}
ct.sum::{+/+/x}
ct.exp::{[tx ty tt];ty::+/'x;tx::+/x;tt::+/tx;cp({(x*y%tt)};ty;tx)}
ct.x2::{+/,/x{((x-y)^2)%x}'ct.exp(x)}

efc::[0.0705230784 0.0422820123 0.0092705272
      0.0001520143 0.0002765672 0.0000430638]
erf::{:[x<0;-erf(-x);1-%(1+/efc**\6:^x)^16]}

f.pmf::{[p];p::(*'y)?x;:[[]~p;0;((y@*p)@1)%+/{x@1}'y]}
f.cdf::{[f m];f::y;m::&/*'y;+/f.pmf(;f)'m+!1+x-m}
f.mu::{(+/{{x*y}@x}'x)%+/{x@1}'x}
f.M::{[s m c];s::+\{x@1}'x;m::(*|s):%2;:[c::s?m;M(*'x@c,c+1);*x@*&s>m]}
f.mo::{[f];*'x@f?|/f::{x@1}'x}
f.var::{((+/({{y*x^2}@x}'x))%+/{x@1}'x)-f.mu(x)^2}
f.add::{[v];:[:_v::x?y;x,y,z;x,y,v+z]}

u.pmf::{:[x<y;0:|x>z;0;%1+z-y]}
u.cdf::{:[x<y;0:|x>z;1;(1+(_x)-y)%1+z-y]}
u.mu::{(x+y)%2}
u.M::u.mu
u.var::{(((y-x+1)^2)-1)%12}
u.skew::{y;0}

r.pdf::{:[x<y;0:|x>z;0;%z-y]}
r.cdf::{:[x<y;0:|x>z;1;(x-y)%z-y]}
r.mu::{(x+y)%2}
r.M::r.mu
r.mo::{,r.mu(x;y)}
r.var::{((y-x)^2)%12}
r.skew::{y;0}

geo.pmf::{y*(1-y)^_(x-1)}
geo.cdf::{1-(1-y)^_x}
geo.mu::{%x}
geo.M::{(-1)%log(10;1-x)}
geo.mo::{x;[1]}
geo.var::{(1-x)%x^2}
geo.skew::{(2-x)%(1-x)^0.5}

b.pmf::{kc(_x;y)*(z^_x)*(1-z)^y-_x}
b.cdf::{[n p];n::y;p::z;+/b.pmf(;n;p)':[0~_x;0;!_1+x]}
b.mu::{x*y}
b.M::{_x*y}
b.mo::{,_y*x+1}
b.var::{x*y*1-y}
b.skew::{((1-y)-y)%(x*y*1-y)^0.5}

hyp.pmf::{[K n p N];n::y@0;p::y@1;N::y@2;K::rnd(N*p);
          :[x<0|n+K-N;0:|x>K&n;0;(kc(_x;K)*kc(n-_x;N-K))%kc(n;N)]}
hyp.cdf::{[n p N];n::y@0;p::y@1;N::y@2;+/hyp.pmf(;n,p,N)':[0~_x;0;!_x]}
hyp.mu::{z;x*y}
hyp.mo::{[K];K::rnd(y*z);,_((x+1)*K+1)%z+2}
hyp.var::{((x*y*y-1)*z-x)%z-1}

poi.pmf::{((y^_x)*e^-y)%:[0~_x;1;*/1+!_x]}
poi.cdf::{[lam];lam::y;+/poi.pmf(;lam)':[0~_x;0;!_x]}
poi.mu::{x}
poi.M::{(_x+1%3)-0.02%x}
poi.mo::{:[x~_x;(x-1),x;,_x]}
poi.var::{x}
poi.skew::{%x^0.5}

sqr2pi::(2*pi)^0.5
sqr2::2^0.5

zscore::{(x-y)%sqr(z)}
ndf::{(%sqr2pi)*exp(-(x^2)%2)}
phi::{0.5+0.5*erf(x%sqr2)}
cdf::phi
qf::{[p];p::x;regf({phi(x)-p};0;1)}

n.pdf::{[s];s::sqr(z);(%s*sqr2pi)*exp(-((x-y)^2)%2*s^2)}
n.cdf::{phi((x-y)%sqr(z))}
n.qf::{y+qf(x)*sqr(z)}
n.mu::{y;x}
n.M::{y;x}
n.mo::{y;,x}
n.vapr::{y}
n.skew::{y;0}

ln.pdf::{:[0=x;0;(%x*sqr(z)*sqr2pi)*exp(-((ln(x)-y)^2)%2*z)]}
ln.cdf::{:[0=x;0;0.5+0.5*erf((ln(x)-y)%sqr2*sqr(z))]}
ln.qf::{[m s p];p::x;m::y;s::z;bisect({ln.cdf(x;m;s)-p})}
ln.mu::{exp(x+y%2)}
ln.M::{y;exp(x)}
ln.mo::{,exp(x-y)}
ln.var::{(exp(y)-1)*exp(y+2*x)}
ln.skew::{x;(2+exp(y))*sqr(exp(y)-1)}

X2::{+/x{((y-x)^2)%x}'y}
x2.pdf::{:[0~y;0;(%((2^x%2)*gam(x%2)))*(y^(x%2)-1)*e^-y%2]}
x2.cdf::{gamp(x%2;y%2)}
x2.qf::{[nu p];nu::x;p::y;regf({x2.cdf(nu;x)-p};0;nu)}
x2.qf::{[nu p];nu::x;p::y;bisect({x2.cdf(nu;x)-p})}
x2.mu::{x}
x2.M::{x*(1-2%9*x)^3}
x2.mo::{,0|x-2}
x2.var::{2*x}
x2.skew::{(8%x)^0.5}

ct.exp::{[r c t];r::{+/x}'x;c::{+/x}'+x;t::+/c;{[a];a::x;{(x*a)%t}'c}'r}
ct.X2::{X2(,/ct.exp(x);,/x)}

tscore::{sqr(x*(y%sqr(z-1)))}
t.pdf::{(gam((x+1)%2)%(sqr(x*pi))*gam(x%2))*(1+(y^2)%x)^-(x+1)%2}
t.cdf::{z1::y*(1-%4*x)*(1+(%2*x)*y^2)^-0.5;
         %(1+e^((0.000345*z1^5)-(0.069647*z1^3))-1.604326*z1)}
t.cdf::{:[y<0;1-.f(x;-y);1-0.5*rbeta(x%x+y^2;x%2;0.5)]}
t.qf::{[nu p];nu::x;p::y;
       :[p<0.5;-bisect({t.cdf(nu;x)-1-p});bisect({t.cdf(nu;x)-p})]}
t.mu::{:[x>1;0;%0]}
t.M::{x;0}
t.mo::{x;[0]}
t.var::{:[x>2;x%x-2;%0]}
t.skew::{x;0}

fscore::{(((*x)^2)*(y@1)^2)%((*y)^2)*(x@1)^2}
F.pdf.n::{gam((y+z)%2)*((y%z)^y%2)*x^((y%2)-1)}
F.pdf.d::{gam(y%2)*gam(z%2)*(1+(y*x)%z)^(y+z)%2}
F.pdf::{:[0=x;0;F.pdf.n(x;y;z)%F.pdf.d(x;y;z)]}
F.cdf::{1-rbeta(z%z+y*x;z%2;y%2)}
F.qf::{[n1 n2 p];n1::y;n2::z;p::x;bisect({F.cdf(x;n1;n2)-p})}
F.mu::{:[y>2;y%y-2;%0]}
F.mo::{:[x>2;,(y*x-2)%x*y+2;%0]}
F.var::{:[y>4;(2*(y^2)*(x+y)-2)%x*((y-2)^2)*y-4;%0]}
F.skew::{:[y>6;(((2*x)+y-2)*sqr(8*y-4))%sqr(x)*(y-6)*sqr(x+y-2);%0]}

help.add([
 ["F.cdf(nu1;nu2;x)" "CDF of F-distribution F ~ F(nu1,nu2)"]
 ["F.pdf(nu1;nu2;x)" "PDF of F-distribution F ~ F(nu1,nu2)"]
 ["F.mu(nu1;nu2)" "mean of F-distribution F ~ F(nu1,nu2)"]
 ["F.mo(nu1;nu2)" "modes of F-distribution F ~ F(nu1,nu2)"]
 ["F.qf(nu1;nu2;p)" "QF of F-distribution F ~ F(nu1,nu2)"]
 ["F.skew(nu1;nu2)" "skewness of F-distribution F ~ F(nu1,nu2)"]
 ["F.var(nu1;nu2)" "variance of F-distribution F ~ F(nu1,nu2)"]
 ["M(D)" "median of data set D"]
 ["Q(x;D)" "x'th quantile of data set D; 0<=x<=1"]
 ["X2(E;O)" "compute X^2 statistic; E=expected, O=observed values"]
 ["b.cdf(x;n;p)" "CDF of binomial distribution X ~ B(n,p)"]
 ["b.mu(n;p)" "mean of binomial distribution X ~ B(n,p)"]
 ["b.pmf(x;n;p)" "PMF of binomial distribution X ~ B(n,p)"]
 ["b.skew(n;p)" "skewness of binomial distribution X ~ B(n,p)"]
 ["b.var(n;p)" "variance of binomial distribution X ~ B(n,p)"]
 ["cdf(x)" "CDF of standard normal distribution X ~ N(0,1)"]
 ["cor(D;S)" "correlation coefficient of data sets"]
 ["cov(D;S)" "covariance of data sets D,S"]
 ["ct.X2(CT)" "compute X^2 statistic from contingency table"]
 ["ct.exp(CT)" "expectations of contingency table"]
 ["ct.sum(CT)" "grand total of contingency table"]
 ["ct.x2(CT)" "chi-square score of contingency table"]
 ["ct.xsum(CT)" "marginal sums of X categories of contingency table"]
 ["ct.ysum(CT)" "marginal sums of Y categories of contingency table"]
 ["cve(f;p;XY)"
  "cross validation error of set XY, fitting fn f, predictor fn p"]
 ["cvset(XY)" "create cross validation set from x/y set"]
 ["dist(PDF;n;[x1 xn])" "&X = set of n D-distributed data points in x1..xn"]
 ["erf(x)" "Gauss error function"]
 ["err(n;r;D)"
  "Add ND error to data set D; n = err values, r = range of error"]
 ["errdist(n)" "n normally distributed error values in the range -0.5..0.5"]
 ["f.M(f)" "median of frequency distribution F"]
 ["f.cdf(x;F)" "CDF of frequency distribution F"]
 ["f.mo(f)" "modes of frequency distribution F"]
 ["f.mu(f)" "mean of frequency distribution F"]
 ["f.pmf(x;F)" "PMF of frequency distribution F"]
 ["f.var(F)" "variance of frequency distribution F"]
 ["f.add(x;y;z)" "add amount z to entry y of frequency table (dictionary) x"]
 ["fdist(D)" "frequency distribution of data set D"]
 ["freq(PDF;n;[x1 xn])" "relative n-point frequency dist X~D in x1..xn"]
 ["fscore([s1 S1];[s2 S2])"
  "F-score of samples means s1/s2 and population means S1/S2"]
 ["geo.cdf(x;p)" "CDF of geometric distribution X ~ Geo(p)"]
 ["geo.mu(p)" "mean of geometric distribution X ~ Geo(p)"]
 ["geo.pmf(x;p)" "PMF of geometric distribution X ~ Geo(p)"]
 ["geo.skew(p)" "skewness of geometric distribution X ~ Geo(p)"]
 ["geo.var(p)" "variance of geometric distribution X ~ Geo(p)"]
 ["hist(k;D)" "k-histogram of data set D (list of means between k-quantiles)"]
 ["hyp.cdf(x;n,p,N)" "CDF of hypergeometric distribution X ~ Hyp(p)"]
 ["hyp.mo(n;p;N)" "modes of hypergeometric distribution X ~ Hyp(p)"]
 ["hyp.mu(n;p;N)" "mean of hypergeometric distribution X ~ Hyp(p)"]
 ["hyp.pmf(x;n,p,N)" "PMF of hypergeometric distribution X ~ Hyp(p)"]
 ["hyp.skew(n;p;N)" "skewness of hypergeometric distribution X ~ Hyp(p)"]
 ["hyp.var(n;p;N)" "variance of hypergeometric distribution X ~ Hyp(p)"]
 ["kc(k;n)" "k-combinations of set of size n"]
 ["kp(k;n)" "k-permutations of set of size n"]
 ["ln.M(mu;sigma^2)" "median of lognormal distribution ln X ~ N(mu,sigma^2)"]
 ["ln.cdf(x;mu;sigma^2)" "CDF of lognormal distribution ln X ~ N(mu,sigma^2)"]
 ["ln.mo(mu;sigma^2)" "modes of lognormal distribution ln X ~ N(mu,sigma^2)"]
 ["ln.mu(mu;sigma^2)" "mean of lognormal distribution ln X ~ N(mu,sigma^2)"]
 ["ln.pdf(x;mu;sigma^2)" "PDF of lognormal distribution ln X ~ N(mu,sigma^2)"]
 ["ln.qf(x;mu;sigma^2)" "QF of lognormal distribution ln X ~ N(mu,sigma^2)"]
 ["ln.skew(mu;sigma^2)"
  "skewness of lognormal distribution ln X ~ N(mu,sigma^2)"]
 ["ln.var(mu;sigma^2)"
  "variance of lognormal distribution ln X ~ N(mu,sigma^2)"]
 ["lr(x;L)" "interpolate y at x using L=a,b of lreg"]
 ["lreg(S)" "linear regression coefficients for x/y set S, gives a,b in ax+b"]
 ["mod(D)" "mode of data set D"]
 ["mse(XY;f)" "mean squared error (MSE) for x/y set and regression fn"]
 ["mse.set(XY;E)" "mean squared error (MSE) for x/y set and expectation E"]
 ["mu(D)" "mean of data set D"]
 ["n.M(mu;sigma^2)" "median of normal distribution X ~ N(mu,sigma^2)"]
 ["n.cdf(x;mu;sigma^2)" "CDF of normal distribution X ~ N(mu,sigma^2)"]
 ["n.mo(mu;sigma^2)" "modes of normal distribution X ~ N(mu,sigma^2)"]
 ["n.mu(mu;sigma^2)" "mean of normal distribution X ~ N(mu,sigma^2)"]
 ["n.pdf(x;mu;sigma^2)" "PDF of normal distribution X ~ N(mu,sigma^2)"]
 ["n.qf(x;mu;sigma^2)" "QF of normal distribution X ~ N(mu,sigma^2)"]
 ["n.skew(mu;sigma^2)" "skewness of normal distribution X ~ N(mu,sigma^2)"]
 ["n.var(mu;sigma^2)" "variance of normal distribution X ~ N(mu,sigma^2)"]
 ["ndf(x)" "PDF of standard normal distribution X ~ N(0,1)"]
 ["nfreq(PDF;n;[x1 xn])" "normalized n-point frequency dist X~D in x1..xn"]
 ["phi(x)" "CDF of standard normal distribution X ~ N(0,1)"]
 ["poi.M(lambda)" "median of poisson distribution X ~ Poi(lambda)"]
 ["poi.cdf(x;lambda)" "CDF of poisson distribution X ~ Poi(lambda)"]
 ["poi.mo(lambda)" "modes of poisson distribution X ~ Poi(lambda)"]
 ["poi.mu(lambda)" "mean of poisson distribution X ~ Poi(lambda)"]
 ["poi.pmf(x;lambda)" "PMF of poisson distribution X ~ Poi(lambda)"]
 ["poi.skew(lambda)" "skewness of poisson distributio X ~ Poi(lambda)"]
 ["poi.var(lambda)" "variance of poisson distribution X ~ Poi(lambda)"]
 ["qf(x)" "QF of standard normal distribution X ~ N(0,1)"]
 ["r.M(a;b)" "median of continuous uniform distribution X ~ U(a,b)"]
 ["r.cdf(x;a;b)" "CDF of continuous uniform distribution X ~ U(a,b)"]
 ["r.mo(a;b)" "modes of continuous uniform distribution X ~ U(a,b)"]
 ["r.mu(a;b)" "mean of continuous uniform distribution X ~ U(a,b)"]
 ["r.pdf(x;a;b)" "PDF of continuous uniform distribution X ~ U(a,b)"]
 ["r.skew(a;b)" "skewness of continuous uniform distribution X ~ U(a,b)"]
 ["r.var(a;b)" "variance of continuous uniform distribution X ~ U(a,b)"]
 ["r2(XY;f)" "R^2 statistic for x/y set and regression function"]
 ["r2.set(XY;E)" "R^2 statistic for x/y set and expectation E"]
 ["rcp(A;B|A;B'|A')" "reverse conditional probability P(A|B) (Bayes' rule)"]
 ["rng(D)" "range of data set D"]
 ["rse(XY;f)" "RSE (res. sq. error) for x/y set and reg. fn. f"]
 ["rse.set(XY;E)" "RSE (res. sq. error) for x/y set and expectation E"]
 ["rss(XY;f)" "RSS for x/y set and regression function f"]
 ["rss.set(XY;E)" "RSS for x/y set and expectation E"]
 ["sd(D)" "standard deviation of data set D (population)"]
 ["seg(k;D)" "divide data set D into k segments, returning k+1 endpoints"]
 ["shuffle(D)" "randomly arrange the elements of data set D"]
 ["sp(x;S)" "interpolate y=S(x) using spline S"]
 ["sp2(x;S)"
  "interpolate y=S(x) using spline S, extrapolate out of range values"]
 ["spl(k;SY)" "compute spline with k degrees of freedom through x/y set"]
 ["ssd(d)" "standard deviation of data set D (sample)"]
 ["svar(d)" "sample variance of data set D"]
 ["t.M(nu)" "median of t-distribution T ~ t(nu)"]
 ["t.cdf(nu;x)" "CDF of t-distribution T ~ t(nu)"]
 ["t.mo(nu)" "modes of t-distribution T ~ t(nu)"]
 ["t.mu(nu)" "mean of t-distribution T ~ t(nu)"]
 ["t.pdf(nu;x)" "PDF of t-distribution T ~ t(nu)"]
 ["t.qf(nu;x)" "QF of t-dist T ~ t(nu)"]
 ["t.skew(nu)" "skewness of t-distribution T ~ t(nu)"]
 ["t.var(nu)" "variance of t-distribution T ~ t(nu)"]
 ["tscore(x;s^2;n)" "t-score of x given variance s^2 and n observations"]
 ["tss(XY)" "total sum of squares (TSS) of x/y set"]
 ["u.M(a;b)" "median of discrete uniform distribution X ~ U(a,b)"]
 ["u.cdf(x;a;b)" "CDF of discrete uniform distribution X ~ U(a,b)"]
 ["u.mu(a;b)" "mean of discrete uniform distribution X ~ U(a,b)"]
 ["u.pmf(x;a;b)" "PMF of discrete uniform distribution X ~ U(a,b)"]
 ["u.skew(a;b)" "skewness of discrete uniform distribution X ~ U(a,b)"]
 ["u.var(a;b)" "variance of discrete uniform distribution X ~ U(a,b)"]
 ["var(D)" "variance of data set D"]
 ["x2.M(nu)" "median of chi-square distribution X ~ chi^2(nu)"]
 ["x2.cdf(nu;x)" "CDF of chi-square distribution X ~ chi^2(nu)"]
 ["x2.mo(nu)" "modes of chi-square distribution X ~ chi^2(nu)"]
 ["x2.mu(nu)" "mean of chi-square distribution X ~ chi^2(nu)"]
 ["x2.pdf(nu;x)" "PDF of chi-square distribution X ~ chi^2(nu)"]
 ["x2.qf(nu;x)" "QF of chi-square dist X ~ chi^2(nu)"]
 ["x2.skew(nu)" "skewness of chi-square distribution X ~ chi^2(nu)"]
 ["x2.var(nu)" "variance of chi-square distribution X ~ chi^2(nu)"]
 ["zscore(x;mu;sigma^2)" "z-score of x given mean mu and variance sigma^2"]
])

.module(0)
